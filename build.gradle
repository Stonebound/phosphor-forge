buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }

        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true

        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
group = project.maven_group

def build_id = System.getenv("GITHUB_RUN_NUMBER");

if (build_id == null) {
    version = "${project.mod_version}-SNAPSHOT"
} else {
    version = "${project.mod_version}+build.${build_id}"
}

repositories {
    mavenCentral()

    maven { url 'https://repo.spongepowered.org/maven' }
}

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                phosphor {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                phosphor {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'phosphor', '--all', '--output', file('src/generated/resources/')

            mods {
                phosphor {
                    source sourceSets.main
                }
            }
        }
    }
}


dependencies {
    //to change the versions see the gradle.properties file
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    compile "org.spongepowered:mixin:0.8"
}

jar {
    manifest {
        attributes([
                "Specification-Title": "phosphor",
                "Specification-Vendor": "JellySquid",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Implementation-Vendor" :"JellySquid",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "phosphor.mixins.json"
        ])
    }
}

reobf {
    jar { }
}

jar.finalizedBy reobfJar

mixin {
    disableRefMapWarning = true
    add sourceSets.main, "mixins.phosphor.refmap.json"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
    from "LICENSE"
}

jar {
    from "LICENSE"
}

def cf_api_token = System.getenv("CF_API_TOKEN")

curseforge {
    // If the environment variable does not exist,
    apiKey cf_api_token == null ? "" : cf_api_token

    project {
        id = project.cf_project_id
        releaseType = 'beta'

        addGameVersion project.cf_game_version

        def displayNameBase = "${project.cf_project_name} mc${project.minecraft_version}-${project.version}"

        mainArtifact(jar) {
            displayName = displayNameBase
        }
    }

    options {
        javaIntegration = false
        forgeGradleIntegration = false
    }
}